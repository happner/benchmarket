#!/usr/bin/env node

/* Relay inbound benchmark data into elasticsearch server */

require('dotenv').config();

var API_KEY = process.env.API_KEY || 'xxx';
var IFACE = process.env.IFACE || '0.0.0.0';
var PORT = process.env.PORT || 3001;

// var ELASTIC_HOST_1 = process.env.ELASTIC_HOST_1 || "http://localhost:9200";
// var ELASTIC_HOST_2 = process.env.ELASTIC_HOST_2 || "http://localhost:9200";
// var ELASTIC_HOST_3 = process.env.ELASTIC_HOST_3 || "http://localhost:9200";

var databaseConfig = require('../database')[process.env.NODE_ENV];

console.log('DD', databaseConfig);

var express = require('express');
var bodyParser = require('body-parser');
var Promise = require('bluebird');
var storeSample;

// var elasticsearch = require('elasticsearch');
// var client = new elasticsearch.Client({
//   hosts: [ELASTIC_HOST_1, ELASTIC_HOST_2, ELASTIC_HOST_3]
// });

var app = express();

app.use(bodyParser.json());
app.use(express.static('static'));

app.use('/benchmarks', function(req, res) {
  if (req.method !== 'POST') {
    res.statusCode = 404;
    return res.end();
  }

  if (typeof req.headers.authorization === 'undefined' || req.headers.authorization !== API_KEY) {
    res.statusCode = 401;
    return res.end();
  }

  if (Object.keys(req.body).length == 0) {
    res.statusCode = 400;
    return res.end();
  }

  Promise.resolve(req.body).map(storeSample, {concurrency: 1})
  .then(function() {
    res.statusCode = 201;
    res.end();
  })
  .catch(function(err) {
    res.statusCode = 500;
    console.log(err.stack);
    res.end(err.stack);
  })


  // var entry = {
  //   index: 'benchmark-' + req.body.repo,
  //   type: req.body.type,
  //   body: {
  //     file: req.body.file,
  //     ts: req.body.ts,
  //     rss: req.body.rss,
  //     heapTotal: req.body.heapTotal,
  //     heapUsed: req.body.heapUsed
  //   }
  // }

  // return client.create(entry).then(
  //   function(response) {
  //     res.statusCode = 201;
  //     res.end(JSON.stringify(response));
  //   },
  //   function(error) {
  //     res.statusCode = 500;
  //     res.end(JSON.stringify({
  //       name: error.name,
  //       message: error.message,
  //     }));
  //   }
  // );

});

app.listen(PORT, IFACE, function() {
  console.log('%s listening %s:%s', new Date(), IFACE, PORT);
});


// abandon elastic for metric storage
//
// storeSample = function(metric) {
//   // console.log(metric);
//   /*
//   {
//     repo: 'happn',
//     file: 'test/test-benchmark/9_permissions_cache_benchmarks.js',
//     test: '9_permissions_cache_benchmark/aa/gg',
//     sample: {
//       type: 'mem',
//       ts: '2016-03-29T12:11:23.451Z',
//       value: {
//         rss: 38760448,
//         heapTotal: 21880928,
//         heapUsed: 14092040
//       }
//     }
//   }
//   */

//   if (metric.sample.type !== 'mem') return;

//   var index = 'benchmarket-' + metric.repo + '-' + metric.sample.type;
//   var type = metric.test.replace(/\//, '--');

//   var entry = {
//     index: index,
//     type: type,
//     body: {
//       ts: metric.sample.ts,
//       rss: metric.sample.rss,
//     }
//   }

//   return client.create(entry)

//   // // because value contains 3 samples,
//   // // but each need to go into separate record
//   // return PRomise.resolve()


// }

